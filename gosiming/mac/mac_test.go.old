package mac

import (
	"testing"
)

func TestAdd(t *testing.T) {
	type args struct {
		deveui string
	}
	tests := []struct {
		name     string
		args     args
		wantErr  bool
		wantNode bool
	}{
		{
			name:    "Add new mac",
			args:    args{"0000000000000003"},
			wantErr: false,
		},

		{
			name:    "Attempt to add existing mac",
			args:    args{"0000000000000002"},
			wantErr: true,
		},
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotNode, err := Add(tt.args.deveui)
			if (err != nil) != tt.wantErr {
				t.Errorf("Add() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if (gotNode != nil) && (gotNode.DevEui() != tt.args.deveui) {
				t.Errorf("Add() = %s, want %v", gotNode.DevEui(), tt.args.deveui)
			}
		})
	}
}

func TestGet(t *testing.T) {
	type args struct {
		deveui string
	}
	tests := []struct {
		name string
		args args
		want bool
	}{
		{
			name: "Find existing",
			args: args{deveui: "0000000000000001"},
			want: true,
		},

		{
			name: "Not found ",
			args: args{deveui: "0000000000000004"},
			want: false,
		},
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := Get(tt.args.deveui)
			if got != nil {
				if !tt.want {
					t.Errorf("Get() = %v, want %v", got, tt.want)
				} else if tt.args.deveui != got.DevEui() {
					t.Errorf("Get() = deveui %s, want %s", got.DevEui(), tt.args.deveui)
				}
			} else if tt.want {
				t.Errorf("Get() = %v, want %v", got, tt.want)
			}
		})
	}
}
