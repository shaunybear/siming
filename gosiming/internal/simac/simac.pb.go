// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.6.1
// source: simac.proto

package simac

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Mac reply codes
type MacReplyStatus int32

const (
	MacReplyStatus_SUCCESS            MacReplyStatus = 0
	MacReplyStatus_ERROR              MacReplyStatus = 1
	MacReplyStatus_MAC_DOES_NOT_EXIST MacReplyStatus = 2
)

// Enum value maps for MacReplyStatus.
var (
	MacReplyStatus_name = map[int32]string{
		0: "SUCCESS",
		1: "ERROR",
		2: "MAC_DOES_NOT_EXIST",
	}
	MacReplyStatus_value = map[string]int32{
		"SUCCESS":            0,
		"ERROR":              1,
		"MAC_DOES_NOT_EXIST": 2,
	}
)

func (x MacReplyStatus) Enum() *MacReplyStatus {
	p := new(MacReplyStatus)
	*p = x
	return p
}

func (x MacReplyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacReplyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_simac_proto_enumTypes[0].Descriptor()
}

func (MacReplyStatus) Type() protoreflect.EnumType {
	return &file_simac_proto_enumTypes[0]
}

func (x MacReplyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacReplyStatus.Descriptor instead.
func (MacReplyStatus) EnumDescriptor() ([]byte, []int) {
	return file_simac_proto_rawDescGZIP(), []int{0}
}

//  Datarate
type DataRate int32

const (
	DataRate_DR0 DataRate = 0
	DataRate_DR1 DataRate = 1
	DataRate_DR2 DataRate = 2
	DataRate_DR3 DataRate = 3
	DataRate_DR4 DataRate = 4
	DataRate_DR5 DataRate = 5
)

// Enum value maps for DataRate.
var (
	DataRate_name = map[int32]string{
		0: "DR0",
		1: "DR1",
		2: "DR2",
		3: "DR3",
		4: "DR4",
		5: "DR5",
	}
	DataRate_value = map[string]int32{
		"DR0": 0,
		"DR1": 1,
		"DR2": 2,
		"DR3": 3,
		"DR4": 4,
		"DR5": 5,
	}
)

func (x DataRate) Enum() *DataRate {
	p := new(DataRate)
	*p = x
	return p
}

func (x DataRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataRate) Descriptor() protoreflect.EnumDescriptor {
	return file_simac_proto_enumTypes[1].Descriptor()
}

func (DataRate) Type() protoreflect.EnumType {
	return &file_simac_proto_enumTypes[1]
}

func (x DataRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataRate.Descriptor instead.
func (DataRate) EnumDescriptor() ([]byte, []int) {
	return file_simac_proto_rawDescGZIP(), []int{1}
}

// LoRaWAN RX Slot
type RxSlot int32

const (
	RxSlot_RX1 RxSlot = 0
	RxSlot_RX2 RxSlot = 1
)

// Enum value maps for RxSlot.
var (
	RxSlot_name = map[int32]string{
		0: "RX1",
		1: "RX2",
	}
	RxSlot_value = map[string]int32{
		"RX1": 0,
		"RX2": 1,
	}
)

func (x RxSlot) Enum() *RxSlot {
	p := new(RxSlot)
	*p = x
	return p
}

func (x RxSlot) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RxSlot) Descriptor() protoreflect.EnumDescriptor {
	return file_simac_proto_enumTypes[2].Descriptor()
}

func (RxSlot) Type() protoreflect.EnumType {
	return &file_simac_proto_enumTypes[2]
}

func (x RxSlot) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RxSlot.Descriptor instead.
func (RxSlot) EnumDescriptor() ([]byte, []int) {
	return file_simac_proto_rawDescGZIP(), []int{2}
}

type DownlinkStatus int32

const (
	DownlinkStatus_OK            DownlinkStatus = 0
	DownlinkStatus_MIC_FAILED    DownlinkStatus = 1
	DownlinkStatus_WRONG_DEVADDR DownlinkStatus = 2
	DownlinkStatus_FCNT_DOWN_GAP DownlinkStatus = 3
	DownlinkStatus_BAD_MHDR      DownlinkStatus = 4
)

// Enum value maps for DownlinkStatus.
var (
	DownlinkStatus_name = map[int32]string{
		0: "OK",
		1: "MIC_FAILED",
		2: "WRONG_DEVADDR",
		3: "FCNT_DOWN_GAP",
		4: "BAD_MHDR",
	}
	DownlinkStatus_value = map[string]int32{
		"OK":            0,
		"MIC_FAILED":    1,
		"WRONG_DEVADDR": 2,
		"FCNT_DOWN_GAP": 3,
		"BAD_MHDR":      4,
	}
)

func (x DownlinkStatus) Enum() *DownlinkStatus {
	p := new(DownlinkStatus)
	*p = x
	return p
}

func (x DownlinkStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DownlinkStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_simac_proto_enumTypes[3].Descriptor()
}

func (DownlinkStatus) Type() protoreflect.EnumType {
	return &file_simac_proto_enumTypes[3]
}

func (x DownlinkStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DownlinkStatus.Descriptor instead.
func (DownlinkStatus) EnumDescriptor() ([]byte, []int) {
	return file_simac_proto_rawDescGZIP(), []int{3}
}

type MacReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      MacReplyStatus `protobuf:"varint,1,opt,name=status,proto3,enum=siming.MacReplyStatus" json:"status,omitempty"`
	ErrorString string         `protobuf:"bytes,2,opt,name=error_string,json=errorString,proto3" json:"error_string,omitempty"`
}

func (x *MacReply) Reset() {
	*x = MacReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simac_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacReply) ProtoMessage() {}

func (x *MacReply) ProtoReflect() protoreflect.Message {
	mi := &file_simac_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacReply.ProtoReflect.Descriptor instead.
func (*MacReply) Descriptor() ([]byte, []int) {
	return file_simac_proto_rawDescGZIP(), []int{0}
}

func (x *MacReply) GetStatus() MacReplyStatus {
	if x != nil {
		return x.Status
	}
	return MacReplyStatus_SUCCESS
}

func (x *MacReply) GetErrorString() string {
	if x != nil {
		return x.ErrorString
	}
	return ""
}

type DevEui struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deveui string `protobuf:"bytes,1,opt,name=deveui,proto3" json:"deveui,omitempty"`
}

func (x *DevEui) Reset() {
	*x = DevEui{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simac_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevEui) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevEui) ProtoMessage() {}

func (x *DevEui) ProtoReflect() protoreflect.Message {
	mi := &file_simac_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevEui.ProtoReflect.Descriptor instead.
func (*DevEui) Descriptor() ([]byte, []int) {
	return file_simac_proto_rawDescGZIP(), []int{1}
}

func (x *DevEui) GetDeveui() string {
	if x != nil {
		return x.Deveui
	}
	return ""
}

type ABPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devaddr  uint32 `protobuf:"varint,1,opt,name=devaddr,proto3" json:"devaddr,omitempty"`
	AppSkey  string `protobuf:"bytes,2,opt,name=app_skey,json=appSkey,proto3" json:"app_skey,omitempty"`
	NwkSkey  string `protobuf:"bytes,3,opt,name=nwk_skey,json=nwkSkey,proto3" json:"nwk_skey,omitempty"`
	FcntUp   uint32 `protobuf:"varint,4,opt,name=fcnt_up,json=fcntUp,proto3" json:"fcnt_up,omitempty"`
	FcntDown uint32 `protobuf:"varint,5,opt,name=fcnt_down,json=fcntDown,proto3" json:"fcnt_down,omitempty"`
}

func (x *ABPConfig) Reset() {
	*x = ABPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simac_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ABPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ABPConfig) ProtoMessage() {}

func (x *ABPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_simac_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ABPConfig.ProtoReflect.Descriptor instead.
func (*ABPConfig) Descriptor() ([]byte, []int) {
	return file_simac_proto_rawDescGZIP(), []int{2}
}

func (x *ABPConfig) GetDevaddr() uint32 {
	if x != nil {
		return x.Devaddr
	}
	return 0
}

func (x *ABPConfig) GetAppSkey() string {
	if x != nil {
		return x.AppSkey
	}
	return ""
}

func (x *ABPConfig) GetNwkSkey() string {
	if x != nil {
		return x.NwkSkey
	}
	return ""
}

func (x *ABPConfig) GetFcntUp() uint32 {
	if x != nil {
		return x.FcntUp
	}
	return 0
}

func (x *ABPConfig) GetFcntDown() uint32 {
	if x != nil {
		return x.FcntDown
	}
	return 0
}

type Commissioning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deveui string `protobuf:"bytes,1,opt,name=deveui,proto3" json:"deveui,omitempty"`
	Appeui string `protobuf:"bytes,2,opt,name=appeui,proto3" json:"appeui,omitempty"`
	Appkey string `protobuf:"bytes,3,opt,name=appkey,proto3" json:"appkey,omitempty"`
}

func (x *Commissioning) Reset() {
	*x = Commissioning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simac_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commissioning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commissioning) ProtoMessage() {}

func (x *Commissioning) ProtoReflect() protoreflect.Message {
	mi := &file_simac_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commissioning.ProtoReflect.Descriptor instead.
func (*Commissioning) Descriptor() ([]byte, []int) {
	return file_simac_proto_rawDescGZIP(), []int{3}
}

func (x *Commissioning) GetDeveui() string {
	if x != nil {
		return x.Deveui
	}
	return ""
}

func (x *Commissioning) GetAppeui() string {
	if x != nil {
		return x.Appeui
	}
	return ""
}

func (x *Commissioning) GetAppkey() string {
	if x != nil {
		return x.Appkey
	}
	return ""
}

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datarate DataRate `protobuf:"varint,1,opt,name=datarate,proto3,enum=siming.DataRate" json:"datarate,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simac_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_simac_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_simac_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigRequest) GetDatarate() DataRate {
	if x != nil {
		return x.Datarate
	}
	return DataRate_DR0
}

type DownlinkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         DownlinkStatus `protobuf:"varint,1,opt,name=status,proto3,enum=siming.DownlinkStatus" json:"status,omitempty"`
	Datarate       DataRate       `protobuf:"varint,2,opt,name=datarate,proto3,enum=siming.DataRate" json:"datarate,omitempty"`
	Rxslot         RxSlot         `protobuf:"varint,3,opt,name=rxslot,proto3,enum=siming.RxSlot" json:"rxslot,omitempty"`
	EncryptedFrame string         `protobuf:"bytes,4,opt,name=encrypted_frame,json=encryptedFrame,proto3" json:"encrypted_frame,omitempty"`
	DecryptedFrame string         `protobuf:"bytes,5,opt,name=decrypted_frame,json=decryptedFrame,proto3" json:"decrypted_frame,omitempty"`
}

func (x *DownlinkInfo) Reset() {
	*x = DownlinkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simac_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownlinkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownlinkInfo) ProtoMessage() {}

func (x *DownlinkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_simac_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownlinkInfo.ProtoReflect.Descriptor instead.
func (*DownlinkInfo) Descriptor() ([]byte, []int) {
	return file_simac_proto_rawDescGZIP(), []int{5}
}

func (x *DownlinkInfo) GetStatus() DownlinkStatus {
	if x != nil {
		return x.Status
	}
	return DownlinkStatus_OK
}

func (x *DownlinkInfo) GetDatarate() DataRate {
	if x != nil {
		return x.Datarate
	}
	return DataRate_DR0
}

func (x *DownlinkInfo) GetRxslot() RxSlot {
	if x != nil {
		return x.Rxslot
	}
	return RxSlot_RX1
}

func (x *DownlinkInfo) GetEncryptedFrame() string {
	if x != nil {
		return x.EncryptedFrame
	}
	return ""
}

func (x *DownlinkInfo) GetDecryptedFrame() string {
	if x != nil {
		return x.DecryptedFrame
	}
	return ""
}

type JoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attempts uint32   `protobuf:"varint,1,opt,name=attempts,proto3" json:"attempts,omitempty"`
	Datarate DataRate `protobuf:"varint,2,opt,name=datarate,proto3,enum=siming.DataRate" json:"datarate,omitempty"`
	Devnonce uint32   `protobuf:"varint,3,opt,name=devnonce,proto3" json:"devnonce,omitempty"`
}

func (x *JoinRequest) Reset() {
	*x = JoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simac_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRequest) ProtoMessage() {}

func (x *JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_simac_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRequest.ProtoReflect.Descriptor instead.
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return file_simac_proto_rawDescGZIP(), []int{6}
}

func (x *JoinRequest) GetAttempts() uint32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *JoinRequest) GetDatarate() DataRate {
	if x != nil {
		return x.Datarate
	}
	return DataRate_DR0
}

func (x *JoinRequest) GetDevnonce() uint32 {
	if x != nil {
		return x.Devnonce
	}
	return 0
}

type JoinReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Joined   bool          `protobuf:"varint,1,opt,name=joined,proto3" json:"joined,omitempty"`
	Downlink *DownlinkInfo `protobuf:"bytes,2,opt,name=downlink,proto3" json:"downlink,omitempty"`
}

func (x *JoinReply) Reset() {
	*x = JoinReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simac_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinReply) ProtoMessage() {}

func (x *JoinReply) ProtoReflect() protoreflect.Message {
	mi := &file_simac_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinReply.ProtoReflect.Descriptor instead.
func (*JoinReply) Descriptor() ([]byte, []int) {
	return file_simac_proto_rawDescGZIP(), []int{7}
}

func (x *JoinReply) GetJoined() bool {
	if x != nil {
		return x.Joined
	}
	return false
}

func (x *JoinReply) GetDownlink() *DownlinkInfo {
	if x != nil {
		return x.Downlink
	}
	return nil
}

type UplinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppPayload string   `protobuf:"bytes,1,opt,name=app_payload,json=appPayload,proto3" json:"app_payload,omitempty"`
	Datarate   DataRate `protobuf:"varint,2,opt,name=datarate,proto3,enum=siming.DataRate" json:"datarate,omitempty"`
	Confirmed  bool     `protobuf:"varint,3,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
}

func (x *UplinkRequest) Reset() {
	*x = UplinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simac_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UplinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UplinkRequest) ProtoMessage() {}

func (x *UplinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_simac_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UplinkRequest.ProtoReflect.Descriptor instead.
func (*UplinkRequest) Descriptor() ([]byte, []int) {
	return file_simac_proto_rawDescGZIP(), []int{8}
}

func (x *UplinkRequest) GetAppPayload() string {
	if x != nil {
		return x.AppPayload
	}
	return ""
}

func (x *UplinkRequest) GetDatarate() DataRate {
	if x != nil {
		return x.Datarate
	}
	return DataRate_DR0
}

func (x *UplinkRequest) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

type UplinkStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply    *MacReply     `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	Downlink *DownlinkInfo `protobuf:"bytes,2,opt,name=downlink,proto3" json:"downlink,omitempty"`
}

func (x *UplinkStatus) Reset() {
	*x = UplinkStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simac_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UplinkStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UplinkStatus) ProtoMessage() {}

func (x *UplinkStatus) ProtoReflect() protoreflect.Message {
	mi := &file_simac_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UplinkStatus.ProtoReflect.Descriptor instead.
func (*UplinkStatus) Descriptor() ([]byte, []int) {
	return file_simac_proto_rawDescGZIP(), []int{9}
}

func (x *UplinkStatus) GetReply() *MacReply {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *UplinkStatus) GetDownlink() *DownlinkInfo {
	if x != nil {
		return x.Downlink
	}
	return nil
}

type MacDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deveui *DevEui   `protobuf:"bytes,1,opt,name=deveui,proto3" json:"deveui,omitempty"`
	Reply  *MacReply `protobuf:"bytes,2,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *MacDetails) Reset() {
	*x = MacDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simac_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacDetails) ProtoMessage() {}

func (x *MacDetails) ProtoReflect() protoreflect.Message {
	mi := &file_simac_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacDetails.ProtoReflect.Descriptor instead.
func (*MacDetails) Descriptor() ([]byte, []int) {
	return file_simac_proto_rawDescGZIP(), []int{10}
}

func (x *MacDetails) GetDeveui() *DevEui {
	if x != nil {
		return x.Deveui
	}
	return nil
}

func (x *MacDetails) GetReply() *MacReply {
	if x != nil {
		return x.Reply
	}
	return nil
}

var File_simac_proto protoreflect.FileDescriptor

var file_simac_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x69, 0x6d, 0x61, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0x5d, 0x0a, 0x08, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x20, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x65, 0x75, 0x69, 0x22, 0x91, 0x01, 0x0a, 0x09, 0x41, 0x42, 0x50, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x76, 0x61, 0x64, 0x64, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x70, 0x70, 0x53, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x77, 0x6b,
	0x5f, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x77, 0x6b,
	0x53, 0x6b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x63, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x63, 0x6e, 0x74, 0x55, 0x70, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x63, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x66, 0x63, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x22, 0x57, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x65, 0x75, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x65, 0x75, 0x69, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x65, 0x75, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70,
	0x6b, 0x65, 0x79, 0x22, 0x3d, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x73, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61,
	0x74, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x73, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x78, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x78, 0x53, 0x6c, 0x6f,
	0x74, 0x52, 0x06, 0x72, 0x78, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x0b, 0x4a,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x73, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x22, 0x55, 0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6a,
	0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x7c, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x70, 0x70, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x73, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x22, 0x68, 0x0a, 0x0c, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61,
	0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a,
	0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x22,
	0x5c, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x45, 0x75, 0x69, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x65, 0x75, 0x69, 0x12, 0x26, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61,
	0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x2a, 0x40, 0x0a,
	0x0e, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x41, 0x43, 0x5f, 0x44,
	0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x02, 0x2a,
	0x40, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x44,
	0x52, 0x30, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x52, 0x31, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x44, 0x52, 0x32, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x52, 0x33, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x44, 0x52, 0x34, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x52, 0x35, 0x10,
	0x05, 0x2a, 0x1a, 0x0a, 0x06, 0x52, 0x78, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x52,
	0x58, 0x31, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x58, 0x32, 0x10, 0x01, 0x2a, 0x5c, 0x0a,
	0x0e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x49, 0x43, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x52, 0x4f, 0x4e, 0x47,
	0x5f, 0x44, 0x45, 0x56, 0x41, 0x44, 0x44, 0x52, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x43,
	0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x47, 0x41, 0x50, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x42, 0x41, 0x44, 0x5f, 0x4d, 0x48, 0x44, 0x52, 0x10, 0x04, 0x32, 0xd8, 0x02, 0x0a, 0x05,
	0x53, 0x69, 0x4d, 0x61, 0x63, 0x12, 0x39, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x2e, 0x73, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x44, 0x65, 0x76, 0x45, 0x75, 0x69, 0x1a, 0x12, 0x2e, 0x73, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x61, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x33, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x73, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x1a, 0x10, 0x2e, 0x73, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x0e, 0x2e, 0x73, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x45, 0x75, 0x69, 0x1a,
	0x10, 0x2e, 0x73, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x13, 0x2e, 0x73, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x73, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3a, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x73, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x70, 0x6c,
	0x69, 0x6e, 0x6b, 0x12, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x6c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x73, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x24, 0x5a, 0x22, 0x73, 0x68, 0x61, 0x75, 0x6e, 0x79,
	0x62, 0x65, 0x61, 0x72, 0x2f, 0x67, 0x6f, 0x73, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x69, 0x6d, 0x61, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_simac_proto_rawDescOnce sync.Once
	file_simac_proto_rawDescData = file_simac_proto_rawDesc
)

func file_simac_proto_rawDescGZIP() []byte {
	file_simac_proto_rawDescOnce.Do(func() {
		file_simac_proto_rawDescData = protoimpl.X.CompressGZIP(file_simac_proto_rawDescData)
	})
	return file_simac_proto_rawDescData
}

var file_simac_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_simac_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_simac_proto_goTypes = []interface{}{
	(MacReplyStatus)(0),   // 0: siming.MacReplyStatus
	(DataRate)(0),         // 1: siming.DataRate
	(RxSlot)(0),           // 2: siming.RxSlot
	(DownlinkStatus)(0),   // 3: siming.DownlinkStatus
	(*MacReply)(nil),      // 4: siming.MacReply
	(*DevEui)(nil),        // 5: siming.DevEui
	(*ABPConfig)(nil),     // 6: siming.ABPConfig
	(*Commissioning)(nil), // 7: siming.Commissioning
	(*ConfigRequest)(nil), // 8: siming.ConfigRequest
	(*DownlinkInfo)(nil),  // 9: siming.DownlinkInfo
	(*JoinRequest)(nil),   // 10: siming.JoinRequest
	(*JoinReply)(nil),     // 11: siming.JoinReply
	(*UplinkRequest)(nil), // 12: siming.UplinkRequest
	(*UplinkStatus)(nil),  // 13: siming.UplinkStatus
	(*MacDetails)(nil),    // 14: siming.MacDetails
}
var file_simac_proto_depIdxs = []int32{
	0,  // 0: siming.MacReply.status:type_name -> siming.MacReplyStatus
	1,  // 1: siming.ConfigRequest.datarate:type_name -> siming.DataRate
	3,  // 2: siming.DownlinkInfo.status:type_name -> siming.DownlinkStatus
	1,  // 3: siming.DownlinkInfo.datarate:type_name -> siming.DataRate
	2,  // 4: siming.DownlinkInfo.rxslot:type_name -> siming.RxSlot
	1,  // 5: siming.JoinRequest.datarate:type_name -> siming.DataRate
	9,  // 6: siming.JoinReply.downlink:type_name -> siming.DownlinkInfo
	1,  // 7: siming.UplinkRequest.datarate:type_name -> siming.DataRate
	4,  // 8: siming.UplinkStatus.reply:type_name -> siming.MacReply
	9,  // 9: siming.UplinkStatus.downlink:type_name -> siming.DownlinkInfo
	5,  // 10: siming.MacDetails.deveui:type_name -> siming.DevEui
	4,  // 11: siming.MacDetails.reply:type_name -> siming.MacReply
	5,  // 12: siming.SiMac.GetMacDetails:input_type -> siming.DevEui
	7,  // 13: siming.SiMac.Create:input_type -> siming.Commissioning
	5,  // 14: siming.SiMac.Delete:input_type -> siming.DevEui
	10, // 15: siming.SiMac.Join:input_type -> siming.JoinRequest
	8,  // 16: siming.SiMac.Configure:input_type -> siming.ConfigRequest
	12, // 17: siming.SiMac.SendUplink:input_type -> siming.UplinkRequest
	14, // 18: siming.SiMac.GetMacDetails:output_type -> siming.MacDetails
	4,  // 19: siming.SiMac.Create:output_type -> siming.MacReply
	4,  // 20: siming.SiMac.Delete:output_type -> siming.MacReply
	11, // 21: siming.SiMac.Join:output_type -> siming.JoinReply
	4,  // 22: siming.SiMac.Configure:output_type -> siming.MacReply
	13, // 23: siming.SiMac.SendUplink:output_type -> siming.UplinkStatus
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_simac_proto_init() }
func file_simac_proto_init() {
	if File_simac_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_simac_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simac_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevEui); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simac_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ABPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simac_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commissioning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simac_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simac_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownlinkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simac_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simac_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simac_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UplinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simac_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UplinkStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simac_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_simac_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_simac_proto_goTypes,
		DependencyIndexes: file_simac_proto_depIdxs,
		EnumInfos:         file_simac_proto_enumTypes,
		MessageInfos:      file_simac_proto_msgTypes,
	}.Build()
	File_simac_proto = out.File
	file_simac_proto_rawDesc = nil
	file_simac_proto_goTypes = nil
	file_simac_proto_depIdxs = nil
}
